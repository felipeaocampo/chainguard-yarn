"""Represents a binary file in a space. An asset can be any file type."""
type Asset {
  contentType(locale: String): String
  contentfulMetadata: ContentfulMetadata!
  description(locale: String): String
  fileName(locale: String): String
  height(locale: String): Int
  linkedFrom(allowedLocales: [String]): AssetLinkingCollections
  size(locale: String): Int
  sys: Sys!
  title(locale: String): String
  url(locale: String, transform: ImageTransformOptions): String
  width(locale: String): Int
}

type AssetCollection {
  items: [Asset]!
  limit: Int!
  skip: Int!
  total: Int!
}

input AssetFilter {
  AND: [AssetFilter]
  OR: [AssetFilter]
  contentType: String
  contentType_contains: String
  contentType_exists: Boolean
  contentType_in: [String]
  contentType_not: String
  contentType_not_contains: String
  contentType_not_in: [String]
  contentfulMetadata: ContentfulMetadataFilter
  description: String
  description_contains: String
  description_exists: Boolean
  description_in: [String]
  description_not: String
  description_not_contains: String
  description_not_in: [String]
  fileName: String
  fileName_contains: String
  fileName_exists: Boolean
  fileName_in: [String]
  fileName_not: String
  fileName_not_contains: String
  fileName_not_in: [String]
  height: Int
  height_exists: Boolean
  height_gt: Int
  height_gte: Int
  height_in: [Int]
  height_lt: Int
  height_lte: Int
  height_not: Int
  height_not_in: [Int]
  size: Int
  size_exists: Boolean
  size_gt: Int
  size_gte: Int
  size_in: [Int]
  size_lt: Int
  size_lte: Int
  size_not: Int
  size_not_in: [Int]
  sys: SysFilter
  title: String
  title_contains: String
  title_exists: Boolean
  title_in: [String]
  title_not: String
  title_not_contains: String
  title_not_in: [String]
  url: String
  url_contains: String
  url_exists: Boolean
  url_in: [String]
  url_not: String
  url_not_contains: String
  url_not_in: [String]
  width: Int
  width_exists: Boolean
  width_gt: Int
  width_gte: Int
  width_in: [Int]
  width_lt: Int
  width_lte: Int
  width_not: Int
  width_not_in: [Int]
}

type AssetLinkingCollections {
  blogCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): BlogCollection
  customerTestimonialCardCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): CustomerTestimonialCardCollection
  customersSectionCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): CustomersSectionCollection
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  generalContentCardCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): GeneralContentCardCollection
  seoMetadataCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): SeoMetadataCollection
}

enum AssetOrder {
  contentType_ASC
  contentType_DESC
  fileName_ASC
  fileName_DESC
  height_ASC
  height_DESC
  size_ASC
  size_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  url_ASC
  url_DESC
  width_ASC
  width_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/5osmwku1bn9f/content_types/blog)
"""
type Blog implements Entry {
  authors(locale: String): [String]
  blogContent(locale: String): BlogBlogContent
  blogName(locale: String): String
  blogSlug(locale: String): String
  contentfulMetadata: ContentfulMetadata!
  datePublished(locale: String): DateTime
  linkedFrom(allowedLocales: [String]): BlogLinkingCollections
  mainImage(locale: String, preview: Boolean): Asset
  metaAbout(locale: String): String
  sys: Sys!
  tags(locale: String): [String]
}

type BlogBlogContent {
  json: JSON!
  links: BlogBlogContentLinks!
}

type BlogBlogContentAssets {
  block: [Asset]!
  hyperlink: [Asset]!
}

type BlogBlogContentEntries {
  block: [Entry]!
  hyperlink: [Entry]!
  inline: [Entry]!
}

type BlogBlogContentLinks {
  assets: BlogBlogContentAssets!
  entries: BlogBlogContentEntries!
  resources: BlogBlogContentResources!
}

type BlogBlogContentResources {
  block: [ResourceLink!]!
  hyperlink: [ResourceLink!]!
  inline: [ResourceLink!]!
}

type BlogCollection {
  items: [Blog]!
  limit: Int!
  skip: Int!
  total: Int!
}

input BlogFilter {
  AND: [BlogFilter]
  OR: [BlogFilter]
  authors_contains_all: [String]
  authors_contains_none: [String]
  authors_contains_some: [String]
  authors_exists: Boolean
  blogContent_contains: String
  blogContent_exists: Boolean
  blogContent_not_contains: String
  blogName: String
  blogName_contains: String
  blogName_exists: Boolean
  blogName_in: [String]
  blogName_not: String
  blogName_not_contains: String
  blogName_not_in: [String]
  blogSlug: String
  blogSlug_contains: String
  blogSlug_exists: Boolean
  blogSlug_in: [String]
  blogSlug_not: String
  blogSlug_not_contains: String
  blogSlug_not_in: [String]
  contentfulMetadata: ContentfulMetadataFilter
  datePublished: DateTime
  datePublished_exists: Boolean
  datePublished_gt: DateTime
  datePublished_gte: DateTime
  datePublished_in: [DateTime]
  datePublished_lt: DateTime
  datePublished_lte: DateTime
  datePublished_not: DateTime
  datePublished_not_in: [DateTime]
  mainImage_exists: Boolean
  metaAbout: String
  metaAbout_contains: String
  metaAbout_exists: Boolean
  metaAbout_in: [String]
  metaAbout_not: String
  metaAbout_not_contains: String
  metaAbout_not_in: [String]
  sys: SysFilter
  tags_contains_all: [String]
  tags_contains_none: [String]
  tags_contains_some: [String]
  tags_exists: Boolean
}

type BlogLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum BlogOrder {
  blogName_ASC
  blogName_DESC
  blogSlug_ASC
  blogSlug_DESC
  datePublished_ASC
  datePublished_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/5osmwku1bn9f/content_types/blogPage)
"""
type BlogPage implements Entry {
  blogAuthor(locale: String): String
  blogContent(locale: String): BlogPageBlogContent
  blogTag(locale: String): String
  blogTitle(locale: String): String
  blogs(locale: String, preview: Boolean): Entry
  contentfulMetadata: ContentfulMetadata!
  datePublished(locale: String): DateTime
  linkedFrom(allowedLocales: [String]): BlogPageLinkingCollections
  sys: Sys!
}

type BlogPageBlogContent {
  json: JSON!
  links: BlogPageBlogContentLinks!
}

type BlogPageBlogContentAssets {
  block: [Asset]!
  hyperlink: [Asset]!
}

type BlogPageBlogContentEntries {
  block: [Entry]!
  hyperlink: [Entry]!
  inline: [Entry]!
}

type BlogPageBlogContentLinks {
  assets: BlogPageBlogContentAssets!
  entries: BlogPageBlogContentEntries!
  resources: BlogPageBlogContentResources!
}

type BlogPageBlogContentResources {
  block: [ResourceLink!]!
  hyperlink: [ResourceLink!]!
  inline: [ResourceLink!]!
}

type BlogPageCollection {
  items: [BlogPage]!
  limit: Int!
  skip: Int!
  total: Int!
}

input BlogPageFilter {
  AND: [BlogPageFilter]
  OR: [BlogPageFilter]
  blogAuthor: String
  blogAuthor_contains: String
  blogAuthor_exists: Boolean
  blogAuthor_in: [String]
  blogAuthor_not: String
  blogAuthor_not_contains: String
  blogAuthor_not_in: [String]
  blogContent_contains: String
  blogContent_exists: Boolean
  blogContent_not_contains: String
  blogTag: String
  blogTag_contains: String
  blogTag_exists: Boolean
  blogTag_in: [String]
  blogTag_not: String
  blogTag_not_contains: String
  blogTag_not_in: [String]
  blogTitle: String
  blogTitle_contains: String
  blogTitle_exists: Boolean
  blogTitle_in: [String]
  blogTitle_not: String
  blogTitle_not_contains: String
  blogTitle_not_in: [String]
  blogs_exists: Boolean
  contentfulMetadata: ContentfulMetadataFilter
  datePublished: DateTime
  datePublished_exists: Boolean
  datePublished_gt: DateTime
  datePublished_gte: DateTime
  datePublished_in: [DateTime]
  datePublished_lt: DateTime
  datePublished_lte: DateTime
  datePublished_not: DateTime
  datePublished_not_in: [DateTime]
  sys: SysFilter
}

type BlogPageLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum BlogPageOrder {
  blogAuthor_ASC
  blogAuthor_DESC
  blogTag_ASC
  blogTag_DESC
  blogTitle_ASC
  blogTitle_DESC
  datePublished_ASC
  datePublished_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/5osmwku1bn9f/content_types/blogs)
"""
type Blogs implements Entry {
  allBlogs(locale: String): Boolean
  blogsPageName(locale: String): String
  contentfulMetadata: ContentfulMetadata!
  featuredBlogsCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): BlogsFeaturedBlogsCollection
  linkedFrom(allowedLocales: [String]): BlogsLinkingCollections
  sys: Sys!
}

type BlogsCollection {
  items: [Blogs]!
  limit: Int!
  skip: Int!
  total: Int!
}

type BlogsFeaturedBlogsCollection {
  items: [Entry]!
  limit: Int!
  skip: Int!
  total: Int!
}

input BlogsFilter {
  AND: [BlogsFilter]
  OR: [BlogsFilter]
  allBlogs: Boolean
  allBlogs_exists: Boolean
  allBlogs_not: Boolean
  blogsPageName: String
  blogsPageName_contains: String
  blogsPageName_exists: Boolean
  blogsPageName_in: [String]
  blogsPageName_not: String
  blogsPageName_not_contains: String
  blogsPageName_not_in: [String]
  contentfulMetadata: ContentfulMetadataFilter
  featuredBlogsCollection_exists: Boolean
  sys: SysFilter
}

type BlogsLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  pageSectionCollection(limit: Int = 100, locale: String, order: [BlogsLinkingCollectionsPageSectionCollectionOrder], preview: Boolean, skip: Int = 0): PageSectionCollection
}

enum BlogsLinkingCollectionsPageSectionCollectionOrder {
  pageSectionName_ASC
  pageSectionName_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

enum BlogsOrder {
  allBlogs_ASC
  allBlogs_DESC
  blogsPageName_ASC
  blogsPageName_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type ContentfulMetadata {
  tags: [ContentfulTag]!
}

input ContentfulMetadataFilter {
  tags: ContentfulMetadataTagsFilter
  tags_exists: Boolean
}

input ContentfulMetadataTagsFilter {
  id_contains_all: [String]
  id_contains_none: [String]
  id_contains_some: [String]
}

"""
Represents a tag entity for finding and organizing content easily.
    Find out more here: https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/content-tags
"""
type ContentfulTag {
  id: String
  name: String
}

"""
[See type definition](https://app.contentful.com/spaces/5osmwku1bn9f/content_types/customerTestimonialCard)
"""
type CustomerTestimonialCard implements Entry {
  company(locale: String): String
  contentfulMetadata: ContentfulMetadata!
  customerName(locale: String): String
  isPopUp(locale: String): Boolean
  link(locale: String): String
  linkedFrom(allowedLocales: [String]): CustomerTestimonialCardLinkingCollections
  logo(locale: String, preview: Boolean): Asset
  sys: Sys!
  testimonial(locale: String): String
  testimonialCardName(locale: String): String
  titleposition(locale: String): String
}

type CustomerTestimonialCardCollection {
  items: [CustomerTestimonialCard]!
  limit: Int!
  skip: Int!
  total: Int!
}

input CustomerTestimonialCardFilter {
  AND: [CustomerTestimonialCardFilter]
  OR: [CustomerTestimonialCardFilter]
  company: String
  company_contains: String
  company_exists: Boolean
  company_in: [String]
  company_not: String
  company_not_contains: String
  company_not_in: [String]
  contentfulMetadata: ContentfulMetadataFilter
  customerName: String
  customerName_contains: String
  customerName_exists: Boolean
  customerName_in: [String]
  customerName_not: String
  customerName_not_contains: String
  customerName_not_in: [String]
  isPopUp: Boolean
  isPopUp_exists: Boolean
  isPopUp_not: Boolean
  link: String
  link_contains: String
  link_exists: Boolean
  link_in: [String]
  link_not: String
  link_not_contains: String
  link_not_in: [String]
  logo_exists: Boolean
  sys: SysFilter
  testimonial: String
  testimonialCardName: String
  testimonialCardName_contains: String
  testimonialCardName_exists: Boolean
  testimonialCardName_in: [String]
  testimonialCardName_not: String
  testimonialCardName_not_contains: String
  testimonialCardName_not_in: [String]
  testimonial_contains: String
  testimonial_exists: Boolean
  testimonial_in: [String]
  testimonial_not: String
  testimonial_not_contains: String
  testimonial_not_in: [String]
  titleposition: String
  titleposition_contains: String
  titleposition_exists: Boolean
  titleposition_in: [String]
  titleposition_not: String
  titleposition_not_contains: String
  titleposition_not_in: [String]
}

type CustomerTestimonialCardLinkingCollections {
  customersSectionCollection(limit: Int = 100, locale: String, order: [CustomerTestimonialCardLinkingCollectionsCustomersSectionCollectionOrder], preview: Boolean, skip: Int = 0): CustomersSectionCollection
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum CustomerTestimonialCardLinkingCollectionsCustomersSectionCollectionOrder {
  pageSectionName_ASC
  pageSectionName_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

enum CustomerTestimonialCardOrder {
  company_ASC
  company_DESC
  customerName_ASC
  customerName_DESC
  isPopUp_ASC
  isPopUp_DESC
  link_ASC
  link_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  testimonialCardName_ASC
  testimonialCardName_DESC
  titleposition_ASC
  titleposition_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/5osmwku1bn9f/content_types/customersSection)
"""
type CustomersSection implements Entry {
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): CustomersSectionLinkingCollections
  pageSectionName(locale: String): String
  selectCustomerLogosCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): AssetCollection
  selectTestimonialsCollection(limit: Int = 100, locale: String, order: [CustomersSectionSelectTestimonialsCollectionOrder], preview: Boolean, skip: Int = 0, where: CustomerTestimonialCardFilter): CustomersSectionSelectTestimonialsCollection
  sys: Sys!
}

type CustomersSectionCollection {
  items: [CustomersSection]!
  limit: Int!
  skip: Int!
  total: Int!
}

input CustomersSectionFilter {
  AND: [CustomersSectionFilter]
  OR: [CustomersSectionFilter]
  contentfulMetadata: ContentfulMetadataFilter
  pageSectionName: String
  pageSectionName_contains: String
  pageSectionName_exists: Boolean
  pageSectionName_in: [String]
  pageSectionName_not: String
  pageSectionName_not_contains: String
  pageSectionName_not_in: [String]
  selectCustomerLogosCollection_exists: Boolean
  selectTestimonials: cfCustomerTestimonialCardNestedFilter
  selectTestimonialsCollection_exists: Boolean
  sys: SysFilter
}

type CustomersSectionLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  pageSectionCollection(limit: Int = 100, locale: String, order: [CustomersSectionLinkingCollectionsPageSectionCollectionOrder], preview: Boolean, skip: Int = 0): PageSectionCollection
}

enum CustomersSectionLinkingCollectionsPageSectionCollectionOrder {
  pageSectionName_ASC
  pageSectionName_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

enum CustomersSectionOrder {
  pageSectionName_ASC
  pageSectionName_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type CustomersSectionSelectTestimonialsCollection {
  items: [CustomerTestimonialCard]!
  limit: Int!
  skip: Int!
  total: Int!
}

enum CustomersSectionSelectTestimonialsCollectionOrder {
  company_ASC
  company_DESC
  customerName_ASC
  customerName_DESC
  isPopUp_ASC
  isPopUp_DESC
  link_ASC
  link_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  testimonialCardName_ASC
  testimonialCardName_DESC
  titleposition_ASC
  titleposition_DESC
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z,
    compliant with the 'date-time' format outlined in section 5.6 of
    the RFC 3339 profile of the ISO 8601 standard for representation
    of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The 'Dimension' type represents dimensions as whole numeric values between `1` and `4000`.
"""
scalar Dimension

interface Entry {
  contentfulMetadata: ContentfulMetadata!
  sys: Sys!
}

type EntryCollection {
  items: [Entry]!
  limit: Int!
  skip: Int!
  total: Int!
}

input EntryFilter {
  AND: [EntryFilter]
  OR: [EntryFilter]
  contentfulMetadata: ContentfulMetadataFilter
  sys: SysFilter
}

enum EntryOrder {
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/5osmwku1bn9f/content_types/generalContentCard)
"""
type GeneralContentCard implements Entry {
  contentfulMetadata: ContentfulMetadata!
  ctas(locale: String): JSON
  descriptionText(locale: String): String
  floatingHeaderText(locale: String): JSON
  heading(locale: String): String
  linkedFrom(allowedLocales: [String]): GeneralContentCardLinkingCollections
  list(locale: String): [String]
  mediaCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): AssetCollection
  pageSectionName(locale: String): String
  subheading(locale: String): String
  sys: Sys!
}

type GeneralContentCardCollection {
  items: [GeneralContentCard]!
  limit: Int!
  skip: Int!
  total: Int!
}

input GeneralContentCardFilter {
  AND: [GeneralContentCardFilter]
  OR: [GeneralContentCardFilter]
  contentfulMetadata: ContentfulMetadataFilter
  ctas_exists: Boolean
  descriptionText: String
  descriptionText_contains: String
  descriptionText_exists: Boolean
  descriptionText_in: [String]
  descriptionText_not: String
  descriptionText_not_contains: String
  descriptionText_not_in: [String]
  floatingHeaderText_exists: Boolean
  heading: String
  heading_contains: String
  heading_exists: Boolean
  heading_in: [String]
  heading_not: String
  heading_not_contains: String
  heading_not_in: [String]
  list_contains_all: [String]
  list_contains_none: [String]
  list_contains_some: [String]
  list_exists: Boolean
  mediaCollection_exists: Boolean
  pageSectionName: String
  pageSectionName_contains: String
  pageSectionName_exists: Boolean
  pageSectionName_in: [String]
  pageSectionName_not: String
  pageSectionName_not_contains: String
  pageSectionName_not_in: [String]
  subheading: String
  subheading_contains: String
  subheading_exists: Boolean
  subheading_in: [String]
  subheading_not: String
  subheading_not_contains: String
  subheading_not_in: [String]
  sys: SysFilter
}

type GeneralContentCardLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  pageSectionCollection(limit: Int = 100, locale: String, order: [GeneralContentCardLinkingCollectionsPageSectionCollectionOrder], preview: Boolean, skip: Int = 0): PageSectionCollection
}

enum GeneralContentCardLinkingCollectionsPageSectionCollectionOrder {
  pageSectionName_ASC
  pageSectionName_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

enum GeneralContentCardOrder {
  heading_ASC
  heading_DESC
  pageSectionName_ASC
  pageSectionName_DESC
  subheading_ASC
  subheading_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/5osmwku1bn9f/content_types/generalPage)
"""
type GeneralPage implements Entry {
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): GeneralPageLinkingCollections
  pageMetadata(locale: String, preview: Boolean, where: SeoMetadataFilter): SeoMetadata
  pageName(locale: String): String
  pageSectionCollection(limit: Int = 100, locale: String, order: [GeneralPagePageSectionCollectionOrder], preview: Boolean, skip: Int = 0, where: PageSectionFilter): GeneralPagePageSectionCollection
  pageSlug(locale: String): String
  sys: Sys!
}

type GeneralPageCollection {
  items: [GeneralPage]!
  limit: Int!
  skip: Int!
  total: Int!
}

input GeneralPageFilter {
  AND: [GeneralPageFilter]
  OR: [GeneralPageFilter]
  contentfulMetadata: ContentfulMetadataFilter
  pageMetadata: cfSeoMetadataNestedFilter
  pageMetadata_exists: Boolean
  pageName: String
  pageName_contains: String
  pageName_exists: Boolean
  pageName_in: [String]
  pageName_not: String
  pageName_not_contains: String
  pageName_not_in: [String]
  pageSection: cfPageSectionNestedFilter
  pageSectionCollection_exists: Boolean
  pageSlug: String
  pageSlug_contains: String
  pageSlug_exists: Boolean
  pageSlug_in: [String]
  pageSlug_not: String
  pageSlug_not_contains: String
  pageSlug_not_in: [String]
  sys: SysFilter
}

type GeneralPageLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum GeneralPageOrder {
  pageName_ASC
  pageName_DESC
  pageSlug_ASC
  pageSlug_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type GeneralPagePageSectionCollection {
  items: [PageSection]!
  limit: Int!
  skip: Int!
  total: Int!
}

enum GeneralPagePageSectionCollectionOrder {
  pageSectionName_ASC
  pageSectionName_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""The 'HexColor' type represents color in `rgb:ffffff` string format."""
scalar HexColor

enum ImageFormat {
  AVIF

  """JPG image format."""
  JPG

  """
  Progressive JPG format stores multiple passes of an image in progressively higher detail.
          When a progressive image is loading, the viewer will first see a lower quality pixelated version which
          will gradually improve in detail, until the image is fully downloaded. This is to display an image as
          early as possible to make the layout look as designed.
  """
  JPG_PROGRESSIVE

  """PNG image format"""
  PNG

  """
  8-bit PNG images support up to 256 colors and weigh less than the standard 24-bit PNG equivalent.
          The 8-bit PNG format is mostly used for simple images, such as icons or logos.
  """
  PNG8

  """WebP image format."""
  WEBP
}

enum ImageResizeFocus {
  """Focus the resizing on the bottom."""
  BOTTOM

  """Focus the resizing on the bottom left."""
  BOTTOM_LEFT

  """Focus the resizing on the bottom right."""
  BOTTOM_RIGHT

  """Focus the resizing on the center."""
  CENTER

  """Focus the resizing on the largest face."""
  FACE

  """Focus the resizing on the area containing all the faces."""
  FACES

  """Focus the resizing on the left."""
  LEFT

  """Focus the resizing on the right."""
  RIGHT

  """Focus the resizing on the top."""
  TOP

  """Focus the resizing on the top left."""
  TOP_LEFT

  """Focus the resizing on the top right."""
  TOP_RIGHT
}

enum ImageResizeStrategy {
  """
  Crops a part of the original image to fit into the specified dimensions.
  """
  CROP

  """
  Resizes the image to the specified dimensions, cropping the image if needed.
  """
  FILL

  """Resizes the image to fit into the specified dimensions."""
  FIT

  """
  Resizes the image to the specified dimensions, padding the image if needed.
          Uses desired background color as padding color.
  """
  PAD

  """
  Resizes the image to the specified dimensions, changing the original aspect ratio if needed.
  """
  SCALE

  """Creates a thumbnail from the image."""
  THUMB
}

input ImageTransformOptions {
  """
  Desired background color, used with corner radius or `PAD` resize strategy.
          Defaults to transparent (for `PNG`, `PNG8` and `WEBP`) or white (for `JPG` and `JPG_PROGRESSIVE`).
  """
  backgroundColor: HexColor

  """
  Desired corner radius in pixels.
          Results in an image with rounded corners (pass `-1` for a full circle/ellipse).
          Defaults to `0`. Uses desired background color as padding color,
          unless the format is `JPG` or `JPG_PROGRESSIVE` and resize strategy is `PAD`, then defaults to white.
  """
  cornerRadius: Int

  """Desired image format. Defaults to the original image format."""
  format: ImageFormat

  """Desired height in pixels. Defaults to the original image height."""
  height: Dimension

  """
  Desired quality of the image in percents.
          Used for `PNG8`, `JPG`, `JPG_PROGRESSIVE` and `WEBP` formats.
  """
  quality: Quality

  """Desired resize focus area. Defaults to `CENTER`."""
  resizeFocus: ImageResizeFocus

  """Desired resize strategy. Defaults to `FIT`."""
  resizeStrategy: ImageResizeStrategy

  """Desired width in pixels. Defaults to the original image width."""
  width: Dimension
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
[See type definition](https://app.contentful.com/spaces/5osmwku1bn9f/content_types/pageSection)
"""
type PageSection implements Entry {
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): PageSectionLinkingCollections
  pageSectionName(locale: String): String
  pageSectionPartsCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0, where: PageSectionPageSectionPartsFilter): PageSectionPageSectionPartsCollection
  sys: Sys!
}

type PageSectionCollection {
  items: [PageSection]!
  limit: Int!
  skip: Int!
  total: Int!
}

input PageSectionFilter {
  AND: [PageSectionFilter]
  OR: [PageSectionFilter]
  contentfulMetadata: ContentfulMetadataFilter
  pageSectionName: String
  pageSectionName_contains: String
  pageSectionName_exists: Boolean
  pageSectionName_in: [String]
  pageSectionName_not: String
  pageSectionName_not_contains: String
  pageSectionName_not_in: [String]
  pageSectionParts: cfpageSectionPartsMultiTypeNestedFilter
  pageSectionPartsCollection_exists: Boolean
  sys: SysFilter
}

type PageSectionLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  generalPageCollection(limit: Int = 100, locale: String, order: [PageSectionLinkingCollectionsGeneralPageCollectionOrder], preview: Boolean, skip: Int = 0): GeneralPageCollection
}

enum PageSectionLinkingCollectionsGeneralPageCollectionOrder {
  pageName_ASC
  pageName_DESC
  pageSlug_ASC
  pageSlug_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

enum PageSectionOrder {
  pageSectionName_ASC
  pageSectionName_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type PageSectionPageSectionPartsCollection {
  items: [PageSectionPageSectionPartsItem]!
  limit: Int!
  skip: Int!
  total: Int!
}

input PageSectionPageSectionPartsFilter {
  AND: [PageSectionPageSectionPartsFilter]
  OR: [PageSectionPageSectionPartsFilter]
  contentfulMetadata: ContentfulMetadataFilter
  sys: SysFilter
}

union PageSectionPageSectionPartsItem = Blogs | CustomersSection | GeneralContentCard | SearchBar

"""
The 'Quality' type represents quality as whole numeric values between `1` and `100`.
"""
scalar Quality

type Query {
  _node(id: ID!, locale: String, preview: Boolean): _Node
  asset(id: String!, locale: String, preview: Boolean): Asset
  assetCollection(limit: Int = 100, locale: String, order: [AssetOrder], preview: Boolean, skip: Int = 0, where: AssetFilter): AssetCollection
  blog(id: String!, locale: String, preview: Boolean): Blog
  blogCollection(limit: Int = 100, locale: String, order: [BlogOrder], preview: Boolean, skip: Int = 0, where: BlogFilter): BlogCollection
  blogPage(id: String!, locale: String, preview: Boolean): BlogPage
  blogPageCollection(limit: Int = 100, locale: String, order: [BlogPageOrder], preview: Boolean, skip: Int = 0, where: BlogPageFilter): BlogPageCollection
  blogs(id: String!, locale: String, preview: Boolean): Blogs
  blogsCollection(limit: Int = 100, locale: String, order: [BlogsOrder], preview: Boolean, skip: Int = 0, where: BlogsFilter): BlogsCollection
  customerTestimonialCard(id: String!, locale: String, preview: Boolean): CustomerTestimonialCard
  customerTestimonialCardCollection(limit: Int = 100, locale: String, order: [CustomerTestimonialCardOrder], preview: Boolean, skip: Int = 0, where: CustomerTestimonialCardFilter): CustomerTestimonialCardCollection
  customersSection(id: String!, locale: String, preview: Boolean): CustomersSection
  customersSectionCollection(limit: Int = 100, locale: String, order: [CustomersSectionOrder], preview: Boolean, skip: Int = 0, where: CustomersSectionFilter): CustomersSectionCollection
  entryCollection(limit: Int = 100, locale: String, order: [EntryOrder], preview: Boolean, skip: Int = 0, where: EntryFilter): EntryCollection
  generalContentCard(id: String!, locale: String, preview: Boolean): GeneralContentCard
  generalContentCardCollection(limit: Int = 100, locale: String, order: [GeneralContentCardOrder], preview: Boolean, skip: Int = 0, where: GeneralContentCardFilter): GeneralContentCardCollection
  generalPage(id: String!, locale: String, preview: Boolean): GeneralPage
  generalPageCollection(limit: Int = 100, locale: String, order: [GeneralPageOrder], preview: Boolean, skip: Int = 0, where: GeneralPageFilter): GeneralPageCollection
  pageSection(id: String!, locale: String, preview: Boolean): PageSection
  pageSectionCollection(limit: Int = 100, locale: String, order: [PageSectionOrder], preview: Boolean, skip: Int = 0, where: PageSectionFilter): PageSectionCollection
  searchBar(id: String!, locale: String, preview: Boolean): SearchBar
  searchBarCollection(limit: Int = 100, locale: String, order: [SearchBarOrder], preview: Boolean, skip: Int = 0, where: SearchBarFilter): SearchBarCollection
  seoMetadata(id: String!, locale: String, preview: Boolean): SeoMetadata
  seoMetadataCollection(limit: Int = 100, locale: String, order: [SeoMetadataOrder], preview: Boolean, skip: Int = 0, where: SeoMetadataFilter): SeoMetadataCollection
  testContent(id: String!, locale: String, preview: Boolean): TestContent
  testContentCollection(limit: Int = 100, locale: String, order: [TestContentOrder], preview: Boolean, skip: Int = 0, where: TestContentFilter): TestContentCollection
}

type ResourceLink {
  sys: ResourceSys!
}

type ResourceSys {
  linkType: String!
  type: String!
  urn: String!
}

"""
[See type definition](https://app.contentful.com/spaces/5osmwku1bn9f/content_types/searchBar)
"""
type SearchBar implements Entry {
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): SearchBarLinkingCollections
  options(locale: String): [String]
  optionsLabel(locale: String): String
  placeholder(locale: String): String
  searchBarName(locale: String): String
  sys: Sys!
}

type SearchBarCollection {
  items: [SearchBar]!
  limit: Int!
  skip: Int!
  total: Int!
}

input SearchBarFilter {
  AND: [SearchBarFilter]
  OR: [SearchBarFilter]
  contentfulMetadata: ContentfulMetadataFilter
  optionsLabel: String
  optionsLabel_contains: String
  optionsLabel_exists: Boolean
  optionsLabel_in: [String]
  optionsLabel_not: String
  optionsLabel_not_contains: String
  optionsLabel_not_in: [String]
  options_contains_all: [String]
  options_contains_none: [String]
  options_contains_some: [String]
  options_exists: Boolean
  placeholder: String
  placeholder_contains: String
  placeholder_exists: Boolean
  placeholder_in: [String]
  placeholder_not: String
  placeholder_not_contains: String
  placeholder_not_in: [String]
  searchBarName: String
  searchBarName_contains: String
  searchBarName_exists: Boolean
  searchBarName_in: [String]
  searchBarName_not: String
  searchBarName_not_contains: String
  searchBarName_not_in: [String]
  sys: SysFilter
}

type SearchBarLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  pageSectionCollection(limit: Int = 100, locale: String, order: [SearchBarLinkingCollectionsPageSectionCollectionOrder], preview: Boolean, skip: Int = 0): PageSectionCollection
}

enum SearchBarLinkingCollectionsPageSectionCollectionOrder {
  pageSectionName_ASC
  pageSectionName_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

enum SearchBarOrder {
  optionsLabel_ASC
  optionsLabel_DESC
  placeholder_ASC
  placeholder_DESC
  searchBarName_ASC
  searchBarName_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/5osmwku1bn9f/content_types/seoMetadata)
"""
type SeoMetadata implements Entry {
  contentfulMetadata: ContentfulMetadata!
  favicon(locale: String, preview: Boolean): Asset
  linkedFrom(allowedLocales: [String]): SeoMetadataLinkingCollections
  metaDescription(locale: String): String
  pageTitle(locale: String): String
  sys: Sys!
}

type SeoMetadataCollection {
  items: [SeoMetadata]!
  limit: Int!
  skip: Int!
  total: Int!
}

input SeoMetadataFilter {
  AND: [SeoMetadataFilter]
  OR: [SeoMetadataFilter]
  contentfulMetadata: ContentfulMetadataFilter
  favicon_exists: Boolean
  metaDescription: String
  metaDescription_contains: String
  metaDescription_exists: Boolean
  metaDescription_in: [String]
  metaDescription_not: String
  metaDescription_not_contains: String
  metaDescription_not_in: [String]
  pageTitle: String
  pageTitle_contains: String
  pageTitle_exists: Boolean
  pageTitle_in: [String]
  pageTitle_not: String
  pageTitle_not_contains: String
  pageTitle_not_in: [String]
  sys: SysFilter
}

type SeoMetadataLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  generalPageCollection(limit: Int = 100, locale: String, order: [SeoMetadataLinkingCollectionsGeneralPageCollectionOrder], preview: Boolean, skip: Int = 0): GeneralPageCollection
}

enum SeoMetadataLinkingCollectionsGeneralPageCollectionOrder {
  pageName_ASC
  pageName_DESC
  pageSlug_ASC
  pageSlug_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

enum SeoMetadataOrder {
  metaDescription_ASC
  metaDescription_DESC
  pageTitle_ASC
  pageTitle_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

type Sys {
  environmentId: String!
  firstPublishedAt: DateTime
  id: String!
  publishedAt: DateTime
  publishedVersion: Int
  spaceId: String!
}

input SysFilter {
  firstPublishedAt: DateTime
  firstPublishedAt_exists: Boolean
  firstPublishedAt_gt: DateTime
  firstPublishedAt_gte: DateTime
  firstPublishedAt_in: [DateTime]
  firstPublishedAt_lt: DateTime
  firstPublishedAt_lte: DateTime
  firstPublishedAt_not: DateTime
  firstPublishedAt_not_in: [DateTime]
  id: String
  id_contains: String
  id_exists: Boolean
  id_in: [String]
  id_not: String
  id_not_contains: String
  id_not_in: [String]
  publishedAt: DateTime
  publishedAt_exists: Boolean
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  publishedAt_in: [DateTime]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_not: DateTime
  publishedAt_not_in: [DateTime]
  publishedVersion: Float
  publishedVersion_exists: Boolean
  publishedVersion_gt: Float
  publishedVersion_gte: Float
  publishedVersion_in: [Float]
  publishedVersion_lt: Float
  publishedVersion_lte: Float
  publishedVersion_not: Float
  publishedVersion_not_in: [Float]
}

"""
[See type definition](https://app.contentful.com/spaces/5osmwku1bn9f/content_types/testContent)
"""
type TestContent implements Entry {
  blog(locale: String): TestContentBlog
  contentfulMetadata: ContentfulMetadata!
  description(locale: String): String
  linkedFrom(allowedLocales: [String]): TestContentLinkingCollections
  name(locale: String): String
  sys: Sys!
}

type TestContentBlog {
  json: JSON!
  links: TestContentBlogLinks!
}

type TestContentBlogAssets {
  block: [Asset]!
  hyperlink: [Asset]!
}

type TestContentBlogEntries {
  block: [Entry]!
  hyperlink: [Entry]!
  inline: [Entry]!
}

type TestContentBlogLinks {
  assets: TestContentBlogAssets!
  entries: TestContentBlogEntries!
  resources: TestContentBlogResources!
}

type TestContentBlogResources {
  block: [ResourceLink!]!
  hyperlink: [ResourceLink!]!
  inline: [ResourceLink!]!
}

type TestContentCollection {
  items: [TestContent]!
  limit: Int!
  skip: Int!
  total: Int!
}

input TestContentFilter {
  AND: [TestContentFilter]
  OR: [TestContentFilter]
  blog_contains: String
  blog_exists: Boolean
  blog_not_contains: String
  contentfulMetadata: ContentfulMetadataFilter
  description: String
  description_contains: String
  description_exists: Boolean
  description_in: [String]
  description_not: String
  description_not_contains: String
  description_not_in: [String]
  name: String
  name_contains: String
  name_exists: Boolean
  name_in: [String]
  name_not: String
  name_not_contains: String
  name_not_in: [String]
  sys: SysFilter
}

type TestContentLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum TestContentOrder {
  name_ASC
  name_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

interface _Node {
  _id: ID!
}

input cfCustomerTestimonialCardNestedFilter {
  AND: [cfCustomerTestimonialCardNestedFilter]
  OR: [cfCustomerTestimonialCardNestedFilter]
  company: String
  company_contains: String
  company_exists: Boolean
  company_in: [String]
  company_not: String
  company_not_contains: String
  company_not_in: [String]
  contentfulMetadata: ContentfulMetadataFilter
  customerName: String
  customerName_contains: String
  customerName_exists: Boolean
  customerName_in: [String]
  customerName_not: String
  customerName_not_contains: String
  customerName_not_in: [String]
  isPopUp: Boolean
  isPopUp_exists: Boolean
  isPopUp_not: Boolean
  link: String
  link_contains: String
  link_exists: Boolean
  link_in: [String]
  link_not: String
  link_not_contains: String
  link_not_in: [String]
  logo_exists: Boolean
  sys: SysFilter
  testimonial: String
  testimonialCardName: String
  testimonialCardName_contains: String
  testimonialCardName_exists: Boolean
  testimonialCardName_in: [String]
  testimonialCardName_not: String
  testimonialCardName_not_contains: String
  testimonialCardName_not_in: [String]
  testimonial_contains: String
  testimonial_exists: Boolean
  testimonial_in: [String]
  testimonial_not: String
  testimonial_not_contains: String
  testimonial_not_in: [String]
  titleposition: String
  titleposition_contains: String
  titleposition_exists: Boolean
  titleposition_in: [String]
  titleposition_not: String
  titleposition_not_contains: String
  titleposition_not_in: [String]
}

input cfPageSectionNestedFilter {
  AND: [cfPageSectionNestedFilter]
  OR: [cfPageSectionNestedFilter]
  contentfulMetadata: ContentfulMetadataFilter
  pageSectionName: String
  pageSectionName_contains: String
  pageSectionName_exists: Boolean
  pageSectionName_in: [String]
  pageSectionName_not: String
  pageSectionName_not_contains: String
  pageSectionName_not_in: [String]
  pageSectionPartsCollection_exists: Boolean
  sys: SysFilter
}

input cfSeoMetadataNestedFilter {
  AND: [cfSeoMetadataNestedFilter]
  OR: [cfSeoMetadataNestedFilter]
  contentfulMetadata: ContentfulMetadataFilter
  favicon_exists: Boolean
  metaDescription: String
  metaDescription_contains: String
  metaDescription_exists: Boolean
  metaDescription_in: [String]
  metaDescription_not: String
  metaDescription_not_contains: String
  metaDescription_not_in: [String]
  pageTitle: String
  pageTitle_contains: String
  pageTitle_exists: Boolean
  pageTitle_in: [String]
  pageTitle_not: String
  pageTitle_not_contains: String
  pageTitle_not_in: [String]
  sys: SysFilter
}

input cfpageSectionPartsMultiTypeNestedFilter {
  AND: [cfpageSectionPartsMultiTypeNestedFilter]
  OR: [cfpageSectionPartsMultiTypeNestedFilter]
  contentfulMetadata: ContentfulMetadataFilter
  sys: SysFilter
}